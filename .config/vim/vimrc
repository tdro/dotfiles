"------------Setup-------------"

mapclear!                                " Clear all mappings.
packadd! matchit                         " Add match tag pairs package.
let skip_defaults_vim=1                  " Do not load defaults if vimrc is missing.


"------------General------------"

let mapleader = "\<space>"               " Set default map leader.
let php_htmlInStrings = 1                " Highlight HTML in PHP.

set ruler                                " Show the cursor position all the time.
set nowrap                               " Do not wrap lines.
set nonumber                             " Set line numbers.
set hlsearch                             " Enable search.
set incsearch                            " Set incremental search.
set showmatch                            " Briefly show matching tags.
set nocompatible                         " Use Vim defaults.
set nofoldenable                         " Disable folds initially.
set splitbelow                           " Open horizontal splits below.
set splitright                           " Open vertical splits to the right.
set nocursorline                         " Remove cursor line.
set notimeout                            " Wait indefinitely for complete key combinations.
set ttimeout                             " Prevent pressing <Esc> twice.
set nostartofline                        " Do not move cursor to line start on buffer switch.
set showcmd                              " Show key presses in status line.
set wildmenu                             " Show tab completions menu.
set nojoinspaces                         " Insert one space after a '.', '?' and '!' with a join command.
set path+=**                             " Search subfolders.
set display=lastline                     " @@@ which indicates remaining line is not displayed.

set nohidden                             " Unload read only buffers when abandoned.
set nobackup                             " No write backups.
set noswapfile                           " Disable swap files.
set nowritebackup                        " No overwrite backups.
set autoread                             " Auto read file on external change.
set autowrite                            " Write if modified.
set autowriteall                         " Write if modified on buffer change.
set autoindent                           " Copy indent from current line to new line.
set ignorecase                           " Ignore case on search.
set fileignorecase                       " Ignore case on file and directories.
set infercase                            " Infer the case on completion.
set smartcase                            " Search by case smartly.
set nolazyredraw                         " Disable lazy redraw on screen when using macros.
set ttyfast                              " Assume fast terminal.
set undofile                             " Enable undofile.
set viminfo+=n~/.config/vim/viminfo      " Set viminfo file path.
set undodir=~/.config/vim/undodir        " Set undofile directory.

set completeopt=                         " Disable <C-p> popup menu.
set mouse=a                              " Enable mouse.
set shortmess+=I                         " Disable startup message.
set shortmess-=S                         " Count number of search result matches.
set showtabline=0                        " Disable tab bar.
set updatetime=1500                      " Set duration for cursor hold event.
set synmaxcol=500                        " Maximum column in which to search for syntax items.
set fillchars=                           " Set split window margin fill to none.
set laststatus=0                         " Disable status bar.
set linespace=3                          " Set line spaces.
set guiheadroom=0                        " Disable headroom on window maximize.
set history=10000                        " Lines of command line history to keep.
set clipboard=unnamed                    " Use clipboard as default register.
set backspace=indent,eol,start           " Enable backspacing.
set formatoptions-=t                     " Do not auto wrap text when typing.
set complete=.,w,b,u,i                   " Set our desired autocompletion match pattern.
set encoding=utf-8                       " Set UTF-8 encoding.
set scrolloff=3                          " Set vertical scroll headroom.
set sidescroll=3                         " Set horizontal column scroll.
set sidescrolloff=10                     " Set horizontal scroll headroom.
set foldcolumn=2                         " Set fold column width to 2.
set makeprg=                             " Unset make program

set dictionary=~/.config/vim/thesaurus                                                     " Set the location of dictionary file.
set thesaurus=~/.config/vim/thesaurus-buffer                                               " Set the location of thesaurus file.
set title titlestring=vim:\ %F titlelen=999999                                             " Set parseable title.
set tabstop=2 softtabstop=0 shiftwidth=2 smarttab expandtab                                " Set spaces as default.
set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:␣                            " Set hidden character identifiers.
set grepprg=rg\ --no-heading\ --line-number\ --column\ --smart-case\ --multiline\ --regexp " Set grep program.


"----------------Visuals----------------"

syntax enable                            " Enable syntax highlighting.
colorscheme fluid                        " Set color scheme.


"---------------Functions---------------"

function! AnsibleCheck()
  :exe 'Notify(''ansible-playbook --syntax-check ' . expand('%') . ' 2>&1'')' | :e
endfunction

function s:repl(start, end, language) " REPL https://vi.stackexchange.com/a/19875
  let g:terminal_buffer = get(g:, 'terminal_buffer', -1)
  if g:terminal_buffer == -1 || !bufexists(g:terminal_buffer)
    terminal ++rows=10
    let g:terminal_buffer = bufnr('')
    call term_sendkeys(g:terminal_buffer, a:language . "; exit" . "\<cr>") | wincmd p
  elseif bufwinnr(g:terminal_buffer) == -1
    exe 'sbuffer ' . g:terminal_buffer | wincmd p
  endif
  call term_sendkeys(g:terminal_buffer, join(getline(a:start, a:end), "\<cr>") . " " . "\<cr>")
endfunction

function s:jump(selection) " Jump to line and column under cursor in the format 123:13
  wincmd p
  let g:segment = split(a:selection, ":")
  call cursor(g:segment[0], g:segment[1])
  if filereadable(g:segment[0])
    exe ':edit ' . g:segment[0]
    call cursor(g:segment[1], g:segment[2])
  endif
endfunction

function s:notify(command)
  call popup_notification(systemlist(a:command), { 'pos': 'topright', 'col': 9999, 'time' : 600000, 'highlight': 'Normal' })
endfunction

function s:replace(...)
   noautocmd exe 'silent cfdo %s/' . a:1 . '/'. join(a:000[1:], ' ') . '/g' | exe 'silent grep ' . shellescape(join(a:000[1:], ' ')) . ' | ' . ':copen' | call feedkeys('/' . join(a:000[1:], ' ') . "\<cr>") | redraw!
endfunction

function s:find(that)
   exe '%bd | silent grep ' . shellescape(escape(a:that, '#|[](){}+')) . ' | ' . ':copen' | call feedkeys('/' . trim(escape(a:that, '?/|'), '^') . "\<cr>") | redraw!
endfunction

function s:make()
  if len(&makeprg) > 0  | silent! exe 'only | term ++rows=10 sh -c ' . '"' . &makeprg . '"' | endif
endfunction


"----------------Commands----------------"

command! -nargs=? -range Make    call s:make()
command! -nargs=? -range Jump    call s:jump(@*)
command! -nargs=1 -range Notify  call s:notify(<args>)
command! -nargs=1 -range Find    call s:find(<f-args>)
command! -nargs=+ -range Replace call s:replace(<f-args>)
command! -nargs=? -range REPL    call s:repl(<line1>, <line2>, <f-args>)
command! -bar BdReadOnly silent! if len(getbufinfo()) > 1 | exe 'bd '.join(filter(range(1, bufnr('$')), {_,v -> getbufvar(v, '&modifiable') == 0})) | endif| " Delete [RO] buffers https://vi.stackexchange.com/a/17603
command! -bar BdNoName silent! if len(getbufinfo()) > 1 && len(getwininfo()) > 2 && len(filter(getbufinfo(), {_,b -> b.name =~ '^!'})) == 0 && len(filter(getwininfo(), {_,w -> w.quickfix == 1})) == 0 && len(filter(getwininfo(), {_,w -> w.terminal == 1})) == 0 | exe 'bd '.join(filter(filter(range(1, bufnr('$')), 'bufexists(v:val)'), 'bufname(v:val)==""')) | endif| " Delete [No Name] buffers


"---------------Shortcuts---------------"

nmap     <leader>ev :tabedit ~/.config/vim/vimrc<cr>|                                        " Edit configuration
nmap     <leader>eh :tabedit ~/.config/vim/viminfo<cr>/^# Command Line History<cr>:e<cr>n|   " Edit command history

nmap     <leader>dp :call fzf#run({'options': ['--preview', 'echo doc {} \| psysh \| fold --spaces --width 80'], 'source': "psysh-doc", 'sink': ':term psysh-doc', 'down': '50%'})<cr>| " View function documentation
vnoremap <leader>dt y:term dict -h localhost <C-R>*<cr>|          " Send visual selection under cursor to dictionary
vnoremap <leader>ds y:term ++hidden ++close recoll -q <C-R>*<cr>| " Send visual selection under cursor to search engine

nmap     <leader>term  :term sh -c ""<left>|                                                        " Run terminal command in shell
nmap     <leader>grep  :Find<space>|                                                                " Cycle through files containing search query
vnoremap <leader>grep y/<C-R>*<cr> \| :exe 'grep' . ' ' . shellescape("<C-R>*")<cr><cr>:copen<cr>|  " Cycle through files containing visual selection
vnoremap <leader>af   y:exe ':term ' . &grepprg . ' ' . '<C-R>*'<cr>|                               " Show files containing visual selection in terminal
nmap     <leader>af    :exe ':term ' . &grepprg . ' ' . ''<left>|                                   " Show files containing search query in terminal

nmap     <leader>jl :norm yaW<cr> \| :Jump<cr>| " Jump to line

nmap     <leader>sl :source ~/.config/vim/sessions/session.vim \| :source ~/.config/vim/vimrc<cr>:Notify('printf "Last saved session loaded."')<cr>| " Load session
nmap     <leader>ss :silent! exe "!~/.config/vim/hooks/pre-session-save" \| :mksession! ~/.config/vim/sessions/session.vim \| :redraw!<cr>:Notify('printf "Current session saved."')<cr>| " Save session

nmap     <leader>sp  :set spell!<cr>|                                                     " Toggle spell check
nmap     <leader>ses :set tabstop=2 softtabstop=0 shiftwidth=2 smarttab expandtab<cr>|    " Switch to spaces
nmap     <leader>set :set tabstop=2 softtabstop=0 shiftwidth=2 smarttab noexpandtab<cr>|  " Switch to tabs
vnoremap <silent>    <leader>sn  <Esc>:call setreg('c', col('.'))<cr>:call setreg('l', line('.'))<cr>gv!perl -e 'print sort { length($a) <=> length($b) } <>'<cr>:call cursor(getreg('l'), getreg('c'))<cr>| " Sort lines by length

nmap     <leader>qq :bd<cr>|                       " Close buffer
nmap     <leader>qa :silent! %bd<cr><C-o>:bd#<cr>| " Close all buffers
nmap     <leader>qw <C-w>c<cr>|                    " Close window

nmap     <leader>ra :set all& \| :source ~/.config/vim/vimrc \| :packloadall \|:e<cr>:Notify('printf "Settings cleared and reloaded."')<cr>| " Reset all settings and source configuration.
nmap     <leader>re gg=G<C-o><C-o>|                 " Re-indent entire file
nmap     <leader>rs :%s/\s\+$//e|                   " Remove trailing whitespace
nmap     <leader>rr :enew \| .!<space>|             " Dump output of command to new buffer
vnoremap <leader>rd !awk '\!dedup[$0]++'<cr>|       " Remove duplicate lines

nmap     <leader>cd :cd %:h \| :pwd<cr>|                                                                                    " Change directory to the current file
nmap     <leader>cv :exe "set colorcolumn=" . (&colorcolumn == "" ? "80" : "")<cr>|                                         " Toggle color column
nmap     <leader>cx :set cursorcolumn!<cr>|                                                                                 " Toggle cursor column
nmap     <leader>ce :silent! %s/–/--/g<cr> \| :silent! %s/—/---/g<cr> \| my \| :%!iconv -f utf-8 -t ascii//translit<cr>'y|  " Transliterate special characters to ascii
nmap     <leader>cn :set number!<cr>|                                                                                       " Toggle line numbers
nmap     <leader>cr :set relativenumber!<cr>|                                                                               " Toggle relative line numbers
vnoremap <leader>ct !column -t -o' '<cr>|                                                                                   " Justify columns
vnoremap <leader>cf !fold --spaces --width<space>80|                                                                        " Fold text
noremap  <leader>cs :w !cat > $HOME/.cache/scratchpad<cr>:e +setf\<space><space>$HOME/.cache/scratchpad<C-left><left>|      " Scratchpad of specified filetype

vmap <C-j> :m'>+<cr>gv| " Move line down
vmap <C-k> :m -2<cr>gv| " Move line up

nmap     q.  Vgv:<up>|                   " Go to last command in visual selection from normal
vmap     .q     :<up>|                   " Go to last command in visual selection
vmap     .f     :!editor-filter<space>|  " Run filter in visual selection
vmap     ..     :<up><cr>|               " Repeat last command in visual selection
vmap     /      y/<C-R>*<cr>N|           " Auto search from visual selection

nmap     <Tab>      :Buffers<cr>|     " List buffers
nmap     <leader>ov :Lines<cr>|       " List lines in loaded buffers
nmap     <leader>ob :BLines<cr>|      " List lines in loaded buffer
nmap     <leader>ot :exe '!$TERMINAL -cd ' . expand('%:p:h') . ' > /dev/null 2>&1 &'<cr><cr>| " Open terminal window in current directory
nmap     <leader>of :call fzf#run({'options': [], 'source': "cat $FZF_FILE_MARKS", 'sink': 'e', 'window': { 'xoffset': 0, 'yoffset': 1, 'width': 1, 'height': 0.5 }})<cr><down>
nmap     <leader>od :call fzf#run({'options': ['--preview', 'ls {}'], 'source': "cut -d' ' -f3 $FZF_DIRECTORY_MARKS", 'sink': 'cd', 'window': { 'xoffset': 0, 'yoffset': 1, 'width': 1, 'height': 0.5 }})<cr><down>
nmap     <leader>oo :call fzf#run({'options': ['--preview', 'highlight -O ansi --force {}'], 'source': 'rg --files --hidden \|\| find . -type f -printf "%P\n" 2> /dev/null', 'sink': 'e', 'window': { 'xoffset': 0, 'yoffset': 1, 'width': 1, 'height': 0.5 }})<cr><down>
nmap     <leader>oa :call fzf#run({'options': ['--preview', 'ls {}'], 'source': "find $HOME -type d -maxdepth 4 2> /dev/null", 'sink': 'cd', 'window': { 'xoffset': 0, 'yoffset': 1, 'width': 1, 'height': 0.5 }})<cr><down>

nmap     <silent>   <leader>nn :if &filetype == "netrw" \| Lexplore \| else \| exe 'Lexplore' . ' ' . expand("%:p:h") \| endif<cr>| " Open native file manager at current file path
nmap     <silent>   <leader>ne :exe 'term ++rows=10 ++close emacs -nw --eval' . ' ' .  '"(dired \"' . expand('%:p:h') . '\")"' . ' ' . '--eval "(vim-evil-dired)"'<cr>| " Open file manager at current file path

nmap     <Bslash>   :vsplit<cr>|              " Vertical split
nmap     <C-Bslash> :split<cr>|               " Horizontal split
nmap     <C-j>      :resize +5<cr>|           " Horizontal split resize down
nmap     <C-k>      :resize -5<cr>|           " Horizontal split resize up
nmap     <C-h>      :vertical resize +5<cr>|  " Vertical split resize left
nmap     <C-l>      :vertical resize -5<cr>|  " Vertical split resize right

inoremap <S-Tab>    <C-d>|       " Inverse Tabs
imap     <C-o>      <C-x><C-n>|  " Keyword local completion
imap     <C-s>      <C-x><C-f>|  " File name completion
imap     <C-y>      <C-x><C-l>|  " Whole line completion
inoremap <silent>   <C-x><C-s> <Esc>:set spell<cr>hea<C-x><C-s>| " Spelling Completion
imap     <silent>   <C-t>      <Esc>:let a = getftime(&thesaurus)<cr>:term ++hidden ++close editor-thesaurus <cword><cr>:while 1 \| let b = getftime(&thesaurus) \| if b > a \| break \| endif \| sleep 100m \| endwhile<cr>hea<C-x><C-t>| " Thesaurus insert completion
vmap     <silent>   <C-t>          y:let a = getftime(&thesaurus)<cr>:term ++hidden ++close editor-thesaurus  <C-R>*<cr>:while 1 \| let b = getftime(&thesaurus) \| if b > a \| break \| endif \| sleep 100m \| endwhile<cr>hea<C-x><C-t>| " Thesaurus visual completion

nmap     <Esc><Esc> :nohl<cr>|                           " Exit incremental search
vnoremap < <gv|                                          " Retain visual selection when tabbing left
vnoremap > >gv|                                          " Retain visual selection when tabbing right
nnoremap Q <Nop>|                                        " Disable Ex Mode
nnoremap <S-v> :call setreg('c', col('.'))<cr><S-v>|     " Prevent cursor from jumping in visual context https://ddrscott.github.io/blog/2016/yank-without-jank/
nnoremap <silent> yy yy:call setreg('c', col('.'))<cr>|  " Prevent cursor from jumping in yanking context
nnoremap <silent>  p  p:call cursor(0, getreg('c'))<cr>| " Prevent cursor from jumping in pasting context

nmap <silent> j j:if &foldenable \| if foldlevel('.') \| exe 'norm zo' \| else \| exe 'norm zM' \| endif \| endif<cr>| " Automatically open and close folds up
nmap <silent> k k:if &foldenable \| if foldlevel('.') \| exe 'norm zo' \| else \| exe 'norm zM' \| endif \| endif<cr>| " Automatically open and close folds down


"------------------Snippets-------------------"

nnoremap ,awk         :-1read $HOME/.config/vim/snippets/skeleton.awk<cr>
nnoremap ,nix-shell   :-1read $HOME/.config/vim/snippets/shell.nix<cr>2jf"a
nnoremap ,nix-module  :-1read $HOME/.config/vim/snippets/module.nix<cr>4jf"a
nnoremap ,nix-package :-1read $HOME/.config/vim/snippets/package.nix<cr>3jf"a
nnoremap ,html        :-1read $HOME/.config/vim/snippets/skeleton.html<cr>3jwf>a


"---------------Plugin Settings---------------"

let g:gundo_prefer_python3=1                                                                " Use python3 to restore gundo functionality.
let g:netrw_banner=0                                                                        " Disable netrw banner.
let g:netrw_winsize = 15                                                                    " Set file explorer initial window size.
let g:fzf_layout = { 'window': { 'xoffset': 0, 'yoffset': 1, 'width': 1, 'height': 0.5 } }  " Set fzf window layout.


"-------------------Autorun-------------------"

augroup AutoCommands

  " Clear auto commands.
  autocmd!

  " Source reloads.
  autocmd BufWritePost .vimrc,vimrc source % | Notify('printf "Configuration sourced."')

  " Linting file type post write commands.
  autocmd FileType *                autocmd! BufWritePost <buffer> :Make
  autocmd FileType markdown         autocmd! BufWritePost <buffer> :only | :term ++rows=10 sh -c "cat % | vale --ext .md"
  autocmd FileType raku             autocmd! BufWritePost <buffer> exe 'Notify(''raku -c ' . expand('%') . ' 2>&1'')' | :e | Make
  autocmd FileType scheme           autocmd! BufWritePost <buffer> exe 'Notify(''guile -s ' . expand('%') . ' 2>&1'')' | :e | Make
  autocmd FileType css              autocmd! BufWritePost <buffer> exe 'Notify(''prettier --ignore-path --write --parser css ' . expand('%') . ' 2>&1'')' | :e | Make
  autocmd FileType html             autocmd! BufWritePost <buffer> exe 'Notify(''prettier --ignore-path --write --parser html ' . expand('%') . ' 2>&1'')' | :e | Make
  autocmd FileType toml             autocmd! BufWritePost <buffer> exe 'Notify(''tomll ' . expand('%') . ' 2>&1 && printf "TOML OK: ' . expand('%') . '"'')' | :e | Make
  autocmd FileType nim              autocmd! BufWritePost <buffer> exe 'Notify(''nimpretty ' . expand('%') . ' 2>&1 && printf "Nim OK: ' . expand('%') . '"'')' | :e | Make
  autocmd FileType rust             autocmd! BufWritePost <buffer> exe 'Notify(''rustfmt ' . expand('%') . ' 2>&1 && printf "rustfmt OK: ' . expand('%') . '"'')' | :e | Make
  autocmd FileType python           autocmd! BufWritePost <buffer> exe 'Notify(''ruff check --no-cache ' . expand('%') . ' 2>&1 && black ' . expand('%') . ' 2>&1'')' | :e | Make
  autocmd FileType ruby             autocmd! BufWritePost <buffer> exe 'Notify(''rubocop --fix-layout ' . expand('%') . ' 2>&1 && rubocop ' . expand('%') . ' 2>&1'')' | :e | Make
  autocmd FileType javascript       autocmd! BufWritePost <buffer> exe 'Notify(''eslint --fix ' . expand('%') . ' 2>&1 && printf "JavaScript OK: '. expand('%') . '"'')' | :e | Make
  autocmd FileType elixir           autocmd! BufWritePost <buffer> exe 'Notify(''mix format ' . expand('%') . ' 2>&1 && printf "Elixir Format OK: ' . expand('%') . '"'')' | :e | Make
  autocmd FileType typescript       autocmd! BufWritePost <buffer> exe 'Notify(''deno fmt ' . expand('%') . ' 2>&1 && NO_COLOR=true deno lint ' . expand('%') . ' 2>&1'')' | :e | Make
  autocmd FileType haskell          autocmd! BufWritePost <buffer> exe 'Notify(''hlint ' . expand('%') . ' 2>&1 && brittany --write-mode inplace ' . expand('%') . ' 2>&1'')' | :e | Make
  autocmd FileType tex              autocmd! BufWritePost <buffer> exe 'Notify(''latexindent --silent --overwrite ' . expand('%') . ' 2>&1 && printf "LaTeX OK: ' . expand('%') . '"'')' | :e | Make
  autocmd FileType bash,sh          autocmd! BufWritePost <buffer> exe 'Notify(''shellcheck -x --exclude=SC1090,SC1091 ' . expand('%') . ' 2>&1 && printf "Shellcheck OK: ' . expand('%') . '"'')' | Make
  autocmd FileType xml,xslt,rng,xsd autocmd! BufWritePost <buffer> exe 'Notify(''xmllint --pretty 1 ' . expand('%') . ' --output ' . expand('%') . ' 2>&1 && printf "XML OK: ' . expand('%') . '"'')' | :e | Make
  autocmd FileType go               autocmd! BufWritePost <buffer> exe 'Notify(''gofmt -w -s -e ' . expand('%') . ' 2>&1 && go vet ' . expand('%') . ' 2>&1 && printf "Go Format OK: ' . expand('%') . '"'')' | :e | Make
  autocmd FileType nix              autocmd! BufWritePost <buffer> exe 'Notify(''nix-linter ' . expand('%') . ' 2>&1 && printf "Nix Lint OK: ' . expand('%') . '"' . ' && nixfmt ' . expand('%') . ' 2>&1' . ''')' | :e | Make
  autocmd FileType php              autocmd! BufWritePost <buffer> exe 'Notify(''phpcbf ' . expand('%') . ' 2>&1 && phpstan --no-progress --no-ansi --no-interaction analyze --level max ' . expand('%') . ' 2>&1'')' | :e | Make
  autocmd FileType bindzone         autocmd! BufWritePost <buffer> exe 'Notify(''file="' . expand('%') . '" && named-checkzone "$(head --lines=1 "$file" | cut --delimiter=" " --fields=2 | perl -ple "chop")" $file'')' | :e | Make
  autocmd FileType json,jsonc       autocmd! BufWritePost <buffer> exe 'Notify(''json5 ' . expand('%') . ' -o ' . expand('%') . ' && ' . 'jsonlint -i ' . expand('%') . ' 2>&1 && printf "JSON OK: ' . expand('%') . '"'')' | :e | Make
  autocmd FileType *react           autocmd! BufWritePost <buffer> exe 'Notify(''export DENO_DIR=/dev/null && deno fmt --ext=tsx ' . expand('%') . ' 2>&1 && NO_COLOR=true deno lint --ext=tsx ' . expand('%') . ' 2>&1'')' | :e | Make
  autocmd FileType awk              autocmd! BufWritePost <buffer> exe 'Notify(''awk -g -f ' . expand('%') . ' 2>&1 && awk -o- -f ' . expand('%') . ' | sponge ' . expand('%') . ' && printf "AWK OK: ' . expand('%') . '"'')' | :e | Make
  autocmd FileType yaml             autocmd! BufWritePost <buffer> exe 'Notify(''yaml round-trip --indent 2 --save ' . expand('%') . ' 2>&1 && yamllint -s ' . expand('%') . ' 2>&1 && printf "YAML OK: ' . expand('%') . '"'')' | :e | Make
  autocmd FileType nginx            autocmd! BufWritePost <buffer> exe 'Notify(''crossplane format ' . expand('%') . ' > /dev/null && crossplane format ' . expand('%') . ' | sponge ' . expand('%') . ' && printf "nginx OK: ' . expand('%') . '"'')' | :e | Make
  autocmd FileType c                autocmd! BufWritePost <buffer> exe 'Notify(''clang-format -i ' . expand('%') . ' 2>&1 && printf "Clang Format OK: ' . expand('%') . '\n"' . ' && gcc -Wall -Wpedantic -Werror -fsyntax-only ' . expand('%') . ' 2>&1'')' | :e | Make
" autocmd FileType nginx            autocmd! BufWritePost <buffer> exe 'Notify(''crossplane format ' . expand('%') . ' > /dev/null && crossplane format ' . expand('%') . ' | sponge ' . expand('%') . ' && printf "nginx OK: ' . expand('%') . '"' . ' && nginx -t -c "$(realpath ' . expand('%') . ')"'')' | :e | Make
  autocmd FileType sql              autocmd! BufWritePost <buffer> exe 'Notify(''sqlint ' . expand('%') . ' 2>&1 && pg_format --config ~/.config/pg_format.conf --inplace ' . expand('%') . ' 2>&1 && sqlfluff lint --exclude-rules L003,L016,LT09 --dialect postgres ' . expand('%') . ' 2>&1 && printf "SQL OK: ' . expand('%') . '"'')' | :e | Make

  " Linting extension post write commands.
  autocmd BufWritePost $HOME/.config/chromexup/config.ini exe 'Notify(''chromexup 2>&1'')'
  autocmd BufWritePost rc.lua                             exe 'Notify(''awesome -k 2>&1'')'
  autocmd BufWritePost quotes,*.fortune                   exe 'Notify(''strfile ' . expand('%') . ''')'
  autocmd BufWritePost *.doas                             exe 'Notify(''doas -C ' . expand('%') . ' 2>&1 && printf "doas OK: ' . expand('%') . '"'')'
  autocmd BufWritePost Xresources                         exe 'Notify(''xrdb ~/.config/X11/Xresources ' . '2>&1 && printf "Reloading Xresources: ' . expand('%') . '"'')'
  autocmd BufWritePost Makefile                           exe 'Notify(''make --dry-run --warn-undefined-variables ' . '2>&1 && printf "\nMake OK: ' . expand('%') . '"'')'
  autocmd BufWritePost *.nft                              exe 'Notify(''doas nft --check --file ' . expand('%') . ' 2>&1 && printf "nftables OK: ' . expand('%') . '"'')'
  autocmd BufWritePost *.desktop                          exe 'Notify(''desktop-file-validate ' . expand('%') . ' 2>&1 && printf "Desktop File OK: ' . expand('%') . '"'')'
  autocmd BufWritePost *.service                          exe 'Notify(''systemd-analyze verify --user ' . expand('%') . ' 2>&1 && printf "Systemd Service File OK: ' . expand('%') . '"'')'

  " Keyword documentation lookups.
  autocmd FileType *      noremap <silent> <buffer> <C-@>  viwy/<C-R>*<cr>N:set modified<cr>:only<cr>:exe 'term ++close ++rows=10 sh -c "w3m ' . shellescape(expand('https://lite.duckduckgo.com/lite?q=<cexpr>')) . '"'<cr><C-w>w
  autocmd FileType *      vmap    <silent> <buffer> <C-@>     y/<C-R>*<cr>N:set modified<cr>:only<cr>:exe 'term ++close ++rows=10 sh -c "w3m ' . shellescape(expand('https://lite.duckduckgo.com/lite?q=<C-R>*')) . '"'<cr><C-w>w
  autocmd FileType *      noremap <silent> <buffer> K      viwy/<C-R>*<cr>N:set modified<cr>:exe 'term ++rows=10 sh -c "MANPAGER= man' . ' ' . shellescape(expand('<cexpr>')) . '"' \| set ft=man<cr><C-w>w
  autocmd FileType *      vmap    <silent> <buffer> K         y/<C-R>*<cr>N:set modified<cr>:exe 'term ++rows=10 sh -c "MANPAGER= man' . ' ' . shellescape('<C-R>*') . '"' \| set ft=man<cr><C-w>w
  autocmd FileType vim    noremap <silent> <buffer> K      viwy/<C-R>*<cr>N:set modified<cr>:exe ':h' . ' ' . expand('<cexpr>')<cr><C-w>w
  autocmd FileType vim    vmap    <silent> <buffer> K         y/<C-R>*<cr>N:set modified<cr>:h<space><C-R>*<cr><C-w>w
  autocmd FileType go     noremap <silent> <buffer> K      viwy/<C-R>*<cr>N:set modified<cr>:exe 'term ++rows=10 sh -c "go doc' . ' ' . shellescape(expand('<cexpr>')) . '"' \| set ft=go<cr><C-w>w
  autocmd FileType go     vmap    <silent> <buffer> K         y/<C-R>*<cr>N:set modified<cr>:exe 'term ++rows=10 sh -c "go doc' . ' ' . shellescape('<C-R>*') . '"' \| set ft=go<cr><C-w>w
  autocmd FileType elixir noremap <silent> <buffer> K      viwy/<C-R>*<cr>N:set modified<cr>:exe 'term ++rows=10 sh -c "printf' . ' ' . shellescape(expand('h(<cexpr>)')) . ' ' . '\| iex"' \| set ft=elixir<cr><C-w>w
  autocmd FileType elixir vmap    <silent> <buffer> K         y/<C-R>*<cr>N:set modified<cr>:exe 'term ++rows=10 sh -c "printf' . ' ' . shellescape(expand('h(<C-R>*)')) . ' ' . '\| iex"' \| set ft=elixir<cr><C-w>w
  autocmd FileType php    noremap <silent> <buffer> K      viwy/<C-R>*<cr>N:set modified<cr>:exe 'term ++rows=10 sh -c "PAGER= echo doc' . ' ' . shellescape(expand('<cexpr>')) . ' ' . '\| psysh"'<cr><C-w>w
  autocmd FileType php    vmap    <silent> <buffer> K         y/<C-R>*<cr>N:set modified<cr>:exe 'term ++rows=10 sh -c "PAGER= echo doc' . ' ' . shellescape('<C-R>*') \| psysh"'<cr><C-w>w

  " Quick fix mappings.
  autocmd FileType qf nmap <silent> <buffer> j j:call setreg('c', col('.'))<cr>:cnext<cr>:autocmd! BufWritePost<cr><C-w>w0n$N<cr>:call cursor(0, getreg('c'))<cr>
  autocmd FileType qf nmap <silent> <buffer> k k:call setreg('c', col('.'))<cr>:cprev<cr>:autocmd! BufWritePost<cr><C-w>w$N0n<cr>:call cursor(0, getreg('c'))<cr>
  autocmd FileType qf nmap <silent> <buffer> <cr> <cr><C-w>w

  " REPL commands.
  autocmd FileType bash       noremap <buffer> <leader>cc :REPL bash<cr>
  autocmd FileType raku       noremap <buffer> <leader>cc :REPL raku<cr>
  autocmd FileType sql        noremap <buffer> <leader>cc :REPL sqlite3<cr>
  autocmd FileType elixir     noremap <buffer> <leader>cc :REPL iex<cr>
  autocmd FileType go         noremap <buffer> <leader>cc :REPL gore<cr>
  autocmd FileType javascript noremap <buffer> <leader>cc :REPL node<cr>
  autocmd FileType lua        noremap <buffer> <leader>cc :REPL lua<cr>
  autocmd FileType nix        noremap <buffer> <leader>cc :REPL nix repl --expr 'import <nixpkgs> {}'<cr>
  autocmd FileType perl       noremap <buffer> <leader>cc :REPL perl -de0<cr>
  autocmd FileType php        noremap <buffer> <leader>cc :REPL psysh<cr>
  autocmd FileType python     noremap <buffer> <leader>cc :REPL python<cr>
  autocmd FileType rust       noremap <buffer> <leader>cc :REPL evcxr<cr>
  autocmd FileType scheme     noremap <buffer> <leader>cc :REPL guile<cr>
  autocmd FileType sh         noremap <buffer> <leader>cc :REPL dash<cr>
  autocmd FileType typescript noremap <buffer> <leader>cc :REPL deno<cr>
  autocmd FileType vim        noremap <buffer> <leader>cc yVy:<C-R>*<bs><cr>
  autocmd FileType awk        noremap <buffer> <leader>cc :term ++rows=10 ++close awk -f %<cr>

  " REPL output.
  autocmd FileType *          noremap <silent> <buffer> <leader>co <C-v>:exe ":'<,'>" . '!editor-repl' . ' ' . &filetype<Home><C-Right><C-U>exe<cr>
  autocmd FileType vim        noremap <buffer> <leader>co yVy:<C-R>*<bs><cr>

  " Netrw mappings
  autocmd FileType netrw      nmap  <buffer> l    <cr>cd
  autocmd FileType netrw      nmap  <buffer> h    -cd
  autocmd FileType netrw      nmap  <buffer> i    mfR
  autocmd FileType netrw      nmap  <buffer> p    mtmc
  autocmd FileType netrw      nmap  <buffer> v    mfj
  autocmd FileType netrw      nmap  <buffer> u    mF
  autocmd FileType netrw      nmap  <buffer> <cr> <Plug>NetrwLocalBrowseCheck

  " Format using visual select + gq.
  autocmd FileType toml            set formatprg=yj\ -tt
  autocmd FileType sh              set formatprg=shfmt\ -
  autocmd FileType lua             set formatprg=lua-format
  autocmd FileType perl            set formatprg=perltidy\ -
  autocmd FileType nix             set formatprg=nix-formatprg
  autocmd FileType php             set formatprg=php-formatprg
  autocmd FileType elixir          set formatprg=mix\ format\ -
  autocmd FileType tex             set formatprg=latexindent\ -
  autocmd FileType c               set formatprg=clang-format\ -
  autocmd FileType python          set formatprg=black\ --quiet\ -
  autocmd FileType lisp,scheme     set formatprg=emacs-batch-indent\ scheme
  autocmd FileType *script         set formatprg=NO_COLOR=true\ deno\ fmt\ --ext\ ts\ -
  autocmd FileType *react          set formatprg=NO_COLOR=true\ deno\ fmt\ --ext\ tsx\ -
  autocmd FileType sql             set formatprg=pg_format\ --config\ ~/.config/pg_format.conf
  autocmd FileType xml             set formatprg=xmllint\ --pretty\ 1\ -\ \|\ tail\ --lines\ +2
  autocmd FileType css             set formatprg=prettier\ --ignore-path\ --parser\ css\ --stdin-filepath\ %
  autocmd FileType html            set formatprg=prettier\ --ignore-path\ --parser\ html\ --stdin-filepath\ %
  autocmd FileType ruby            set formatprg=rubocop\ --autocorrect\ --stderr\ --stdin\ %\ 2>\ \/dev\/null
  autocmd FileType markdown        set formatprg=prettier\ --ignore-path\ --parser\ markdown\ --stdin-filepath\ %

  " Guess filetype from extension when missing
  autocmd BufRead,BufNewFile * if &filetype == '' | let &filetype = expand('%:e') | endif

  " Format by extension using visual select + gq
  autocmd BufRead,BufNewFile *.mathml.xml set formatprg=latexmlmath\ -

  " Set file types by extension
  autocmd BufRead,BufNewFile *.nims       set filetype=nim
  autocmd BufRead,BufNewFile *.rasi       set filetype=css
  autocmd BufRead,BufNewFile *.doas       set filetype=conf
  autocmd BufRead,BufNewFile *.nft        set filetype=nftables
  autocmd BufRead,BufNewFile *.blade.php  set filetype=php

  " Allow switching between [No Name] buffers
  autocmd BufLeave,BufWinEnter * if &filetype == "" | set bh=hide | endif
  autocmd BufWinLeave,QuickFixCmdPost * silent! :BdNoName

  " Open quick before jumping to the first location.
  autocmd QuickFixCmdPost * copen

  " Clear notification on cursor movement.
  autocmd CursorMoved * silent! call popup_clear()

  " Remove trailing white space on save.
  autocmd BufWritePre * %s/\s\+$//e

  " Persist command history.
  autocmd CmdwinLeave * wviminfo

  " Keep only one terminal window open
  autocmd TerminalWinOpen * silent! :BdReadOnly

  " Save file on insert and idle.
  autocmd InsertLeave,CursorHold * silent! write | silent! exe "!~/.config/vim/hooks/post-save > /dev/null 2>&1 &" | if len(expand('%:t')) > 20  | echo strpart(expand('%:t'), 0, 20) . '...' '[filetype=' . &filetype . ']' | else | echo expand('%:t') '[filetype=' . &filetype . ']' | endif

augroup END
