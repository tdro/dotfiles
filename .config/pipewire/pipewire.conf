context.properties = {
  link.max-buffers       = 16           # version < 3 clients can't handle more
  core.daemon            = true         # listening for socket connections
  core.name              = pipewire-0   # core name and socket name
  module.x11.bell        = false        # bell sound
  module.access          = true         # enables autoloading of access module
  module.jackdbus-detect = true         # enables autoloading of module-jackdbus-detect
}

context.properties.rules = [
  {
    matches = [ { cpu.vm.name = !null } ]
    actions = { update-props = { default.clock.min-quantum = 1024 } }
  }
]

context.spa-libs = {
  audio.convert.* = audioconvert/libspa-audioconvert
  avb.*           = avb/libspa-avb
  api.alsa.*      = alsa/libspa-alsa
  api.v4l2.*      = v4l2/libspa-v4l2
  api.libcamera.* = libcamera/libspa-libcamera
  api.bluez5.*    = bluez5/libspa-bluez5
  api.vulkan.*    = vulkan/libspa-vulkan
  api.jack.*      = jack/libspa-jack
  support.*       = support/libspa-support
  video.convert.* = videoconvert/libspa-videoconvert
}

context.modules = [
  {
    name = libpipewire-module-rt
    args = {
      nice.level = -11
      rt.prio = 88
    }
    flags = [ ifexists nofail ]
  }

  {
    name = libpipewire-module-protocol-native
    args = { }
  }

  { name = libpipewire-module-profiler }            # Allows application to access profiler and performance data.
  { name = libpipewire-module-metadata }            # Allows applications to create metadata objects.
  { name = libpipewire-module-spa-device-factory }  # Creates a factory for making devices that run in the context of the PipeWire server.
  { name = libpipewire-module-spa-node-factory }    # Creates a factory for making nodes that run in the context of the PipeWire server.
  { name = libpipewire-module-client-node }         # Allows creating nodes that run in the context of the client.
  { name = libpipewire-module-client-device }       # Allows creating devices that run in the context of the client.

  {
    name = libpipewire-module-portal                # The portal module monitors the PID of the portal process and tags connections with the same PID as portal connections.
    flags = [ ifexists nofail ]
  }

  {
    name = libpipewire-module-access                # The access module can perform access checks and block new clients.
    args = { }
    condition = [ { module.access = true } ]
  }

  { name = libpipewire-module-adapter }             # Makes a factory for wrapping nodes in an adapter with a converter and resampler.
  { name = libpipewire-module-link-factory }        # Makes a factory for creating links between ports.
  { name = libpipewire-module-session-manager }     # Provides factories to make session manager objects.

  {
      name = libpipewire-module-x11-bell            # Use libcanberra to play X11 Bell
      args = { }
      flags = [ ifexists nofail ]
      condition = [ { module.x11.bell = true } ]
  }

  {
    name = libpipewire-module-jackdbus-detect
    args = {
      source.props = { }
      sink.props = { }
    }
    flags = [ ifexists nofail ]
    condition = [ { module.jackdbus-detect = true } ]
  }
]

context.objects = [
  {
    factory = spa-node-factory
    args = {
      factory.name    = support.node.driver
      node.name       = Dummy-Driver
      node.group      = pipewire.dummy
      node.sync-group = sync.dummy
      priority.driver = 200000
    }
  }

  {
    factory = spa-node-factory
    args = {
      factory.name    = support.node.driver
      node.name       = Freewheel-Driver
      priority.driver = 190000
      node.group      = pipewire.freewheel
      node.sync-group = sync.dummy
      node.freewheel  = true
    }
  }
]
